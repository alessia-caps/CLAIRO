import * as React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Upload, CalendarDays, CheckCircle2, XCircle, Hourglass } from "lucide-react";
import { useLeaveUpload } from "@/hooks/use-leave-upload";

// Small inline SVG line chart component with simple x-axis labels
function LineChart({ data }: { data: { x: string; y: number }[] }) {
  if (!data || data.length === 0) return <div className="text-sm text-muted-foreground">No data</div>;
  const values = data.map((d) => d.y || 0);
  const max = Math.max(...values, 1);
  const min = Math.min(...values, 0);
  const width = 300;
  const height = 120;
  const px = (i: number) => (i / Math.max(1, data.length - 1)) * width;
  const py = (v: number) => height - ((v - min) / Math.max(1, max - min)) * height;
  const points = data.map((d, i) => `${px(i)},${py(d.y)}`).join(" ");

  return (
    <div className="w-full">
      <svg viewBox={`0 0 ${width} ${height}`} className="w-full h-28" preserveAspectRatio="none">
        <polyline fill="none" stroke="#4f46e5" strokeWidth={2} points={points} strokeLinecap="round" strokeLinejoin="round" />
        {data.map((d, i) => (
          <circle key={d.x} cx={px(i)} cy={py(d.y)} r={2.5} fill="#4f46e5" />
        ))}
      </svg>
      <div className="flex items-center justify-between mt-2 text-xs text-muted-foreground">
        {data.map((d, i) => (
          <div key={d.x} style={{ width: `${100 / Math.max(1, data.length)}%` }} className="text-center truncate">
            {d.x}
          </div>
        ))}
      </div>
    </div>
  );
}

// Small bar chart (horizontal bars)
function BarChart({ data }: { data: { label: string; value: number }[] }) {
  if (!data || data.length === 0) return <div className="text-sm text-muted-foreground">No data</div>;
  const max = Math.max(...data.map((d) => d.value), 1);
  return (
    <div className="space-y-2">
      {data.slice(0, 8).map((d) => (
        <div key={d.label} className="flex items-center gap-2">
          <div className="text-xs w-28 truncate">{d.label}</div>
          <div className="h-3 bg-muted flex-1 rounded overflow-hidden">
            <div style={{ width: `${(d.value / max) * 100}%` }} className="h-3 bg-primary rounded" />
          </div>
          <div className="text-xs text-muted-foreground w-12 text-right">{d.value}</div>
        </div>
      ))}
    </div>
  );
}

export default function LeaveReports() {
  const {
    transactions,
    summary,
    analytics,
    error,
    isUploading,
    uploadWorkbook,
    clear,
  } = useLeaveUpload();

  const parseDate = (v?: string) => {
    if (!v) return null;
    const d = new Date(v);
    if (!isNaN(d.getTime())) return d;
    const d2 = new Date(String(v).replace(/-/g, "/"));
    if (!isNaN(d2.getTime())) return d2;
    return null;
  };

  const monthlyTrend = React.useMemo(() => {
    const map = new Map<string, { requests: number; days: number }>();
    for (const t of transactions) {
      const d = parseDate(t.dateFrom || t.dateFiled || t.dateTo);
      const key = d ? `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, "0")}` : "unknown";
      const cur = map.get(key) || { requests: 0, days: 0 };
      cur.requests += 1;
      cur.days += (t.withPayDays || 0) + (t.withoutPayDays || 0);
      map.set(key, cur);
    }
    return Array.from(map.entries())
      .map(([k, v]) => {
        const [y, m] = k.split("-");
        let label = k;
        if (y && m && m !== "unknown") {
          const dt = new Date(Number(y), Number(m) - 1, 1);
          label = dt.toLocaleString(undefined, { month: "short" });
        }
        return { month: k, label, ...v };
      })
      .sort((a, b) => a.month.localeCompare(b.month));
  }, [transactions]);

  // Leave balances analytics derived from summary
  const balancesAnalytics = React.useMemo(() => {
    const uniqueEmployees = new Set(summary.map((s) => s.employeeId));
    const avgAvailable = (() => {
      const vals = summary.map((s) => s.totalAvailableBalanceYtd || 0);
      return vals.length ? vals.reduce((a, b) => a + b, 0) / vals.length : 0;
    })();
    const lowCount = summary.filter((s) => (s.totalAvailableBalanceYtd || 0) <= 5).length;

    const topEmployees = summary
      .map((s) => ({ name: `${s.lastName}, ${s.firstName}`, value: s.totalAvailableBalanceYtd || 0 }))
      .sort((a, b) => b.value - a.value)
      .slice(0, 8);

    const deptMap = new Map<string, { sum: number; count: number }>();
    for (const s of summary) {
      const d = s.department || "Unknown";
      const cur = deptMap.get(d) || { sum: 0, count: 0 };
      cur.sum += s.totalAvailableBalanceYtd || 0;
      cur.count += 1;
      deptMap.set(d, cur);
    }
    const deptAvg = Array.from(deptMap.entries())
      .map(([dept, v]) => ({ label: dept, value: v.sum / Math.max(1, v.count) }))
      .sort((a, b) => b.value - a.value)
      .slice(0, 8);

    return { uniqueEmployees: uniqueEmployees.size, avgAvailable, lowCount, topEmployees, deptAvg };
  }, [summary]);

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Leave Reports</h1>
          <p className="text-muted-foreground">
            Upload a single Excel file containing both the Leave Transactions and Leave Summary sheets.
          </p>
        </div>

        <div className="flex items-center gap-2">
          <input
            id="workbook-upload"
            type="file"
            accept=".xlsx,.xls"
            className="hidden"
            onChange={async (e) => {
              const f = e.currentTarget.files?.[0];
              if (!f) return;
              try {
                await uploadWorkbook(f);
              } catch (err) {
                // hook handles errors
              }
              e.currentTarget.value = "";
            }}
          />
          <Button onClick={() => document.getElementById("workbook-upload")?.click()} disabled={isUploading}>
            <Upload className="h-4 w-4 mr-2" /> Upload Excel
          </Button>
          {(transactions.length > 0 || summary.length > 0) && (
            <Button variant="secondary" onClick={clear}>
              Clear
            </Button>
          )}
        </div>
      </div>

      {error && (
        <Alert variant="destructive">
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {transactions.length === 0 && summary.length === 0 ? (
        <Card>
          <CardHeader>
            <CardTitle>Expected Columns</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-2 gap-4 text-sm text-muted-foreground">
              <div>
                <p className="font-medium text-foreground mb-1">Leave Transactions</p>
                <ul className="list-disc pl-5 space-y-1">
                  <li>EmployeeID, Name, LeaveTypeName</li>
                  <li>DateFiled, DateFrom, DateTo</li>
                  <li>WithPayNoOfdays, WoutPayNoOfDays</li>
                  <li>Reason, LeaveStatus, RejectReason</li>
                  <li>DateApprovedSupervisor, DateRejectedSupervisor</li>
                </ul>
              </div>
              <div>
                <p className="font-medium text-foreground mb-1">Leave Summary</p>
                <ul className="list-disc pl-5 space-y-1">
                  <li>EMPLOYEE ID, LAST NAME, FIRST NAME, MIDDLE NAME</li>
                  <li>DEPARTMENT, HIRE DATE, REGULARIZATION DATE</li>
                  <li>LEAVE TYPE, LEAVES USED DURING DATE RANGE</li>
                  <li>Total Available Balance (YTD), IS ACTIVE</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      ) : null}

      {transactions.length > 0 && (
        <div>
          <Tabs defaultValue="overview">
            <TabsList>
              <TabsTrigger value="overview">Overview</TabsTrigger>
              <TabsTrigger value="top">Top Employees</TabsTrigger>
              <TabsTrigger value="upcoming">Upcoming</TabsTrigger>
            </TabsList>

            <TabsContent value="overview">
              <div className="space-y-6">
                <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
                  <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium">Total Requests</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold">{analytics.totals.requests.toLocaleString()}</div>
                      <p className="text-xs text-muted-foreground">In transactions file</p>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium">Approved</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold">{analytics.totals.approved.toLocaleString()}</div>
                      <p className="text-xs text-muted-foreground">Requests approved</p>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium">Pending</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold">{analytics.totals.pending.toLocaleString()}</div>
                      <p className="text-xs text-muted-foreground">Awaiting approval</p>
                    </CardContent>
                  </Card>

                      